1.
This problem is more intuitive than the planet problem.
It seems like what I need to do is:
1) Initialize a matrix to represent Z-city, with each cell representing how many pizzerias delivering to this place.
2) Iterate through each pizzeria to update the values of the matrix.
3) Output the max

The three steps above seem inevitable, but there are two ways to update.
The first is, for each pizzeria, check each cell to see whether it is within delivery range.
The second is, for each pizzeria, compute the areas where it can deliver to.This method performs a BFS from every pizzeria.

The first one is easier to implement, which corresponds to my solution.
The second one is more efficient, since it avoids unneccesary computation. It could as bad as the first one, but would not be worse.

3.
3.1 The time complexity is O(M*N^2), where M is the number of pizzeria, N is the dimension of the city.
    The while loop will be executed M times.
    Each time we go into the while top, the two for loops, each with constant time, will be executed.
    The space complexity is O(N^2), since we have a 2D matrix.

3.2 As I mentioned above, I could save some unnecessary computations if pursing the second route.
    The time complexity would be bounded by O(M*R^2), where R is the biggest delivery range among all pizzeria.
    The space complexity is O(N^2) still.
    Hence, this complexity is no worse than the one implemented.

    Some ideas of how to do the first route in an alternative way :
    With the given example, all we need from the first pizzeria's matrix is the diamond shape thing, and the bottom left triangle from the second.
    I could have two matrix, one representing the row, and the other representing the column, to grab the area that needs to be updated with some matrix manipulation.

    row_matrix = [ 0 0 0 0 0            col_matrix = [ 0 1 2 3 4
                   1 1 1 1 1                           0 1 2 3 4
                   2 2 2 2 2                           0 1 2 3 4
                   3 3 3 3 3                           0 1 2 3 4
                   4 4 4 4 4]                          0 1 2 3 4]

    For the first pizzeria, its delivery distance is 2, so we can subtract 2 from each cell in the row_matrix, and in the col_matrix, and then take the absolute values.

    row_matrix = [ 2 2 2 2 2            col_matrix = [ 2 1 0 1 2
                   1 1 1 1 1                           2 1 0 1 2
                   0 0 0 0 0                           2 1 0 1 2
                   1 1 1 1 1                           2 1 0 1 2
                   2 2 2 2 2]                          2 1 0 1 2]

    And then we add the two together, and filter out the area with value <=2 :

    row_add_col = [ 4 3 2 3 4           diamond = [0 0 1 0 0
                    3 2 1 2 3                      0 1 1 1 0
                    2 1 0 1 2                      1 1 1 1 1
                    3 2 1 2 3                      0 1 1 1 0
                    4 3 2 3 4]                     0 0 1 0 0]




